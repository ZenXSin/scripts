package miraiimport java.io.ByteArrayOutputStreamimport java.io.PrintStream    val outputStream = ByteArrayOutputStream()    val printStream = PrintStream(outputStream)    System.setOut(printStream)    System.setErr(printStream)    globalEventChannel().subscribeMessages {    case("开发者帮助") {    val mes = "*列出日志 | 列出服务器日志\n*更新 | 更新机器人配置\n*下划线'_' + 服务器终端指令 | 在服务器终端执行指令，并获取回传(自动更新)\n\\\\\\需要有特殊权限\\\\\\"    val plainText = PlainText(mes.toString())                val forward: ForwardMessage = buildForwardMessage {            add(809109491L, "ra", plainText)            }                subject.sendMessage(forward)    }    case("列出日志") {    val user = sender.id            if (user == 3113769776 || user == 2504013368 || user == 548580339L || user == 1471135253L || user == 809109491L || user == 488254306L) {            val mes = outputStream                val strippedMessage = mes.toString()                val sm = strippedMessage.replace("<br>", "\n")                val mms = sa(sm.toString())                val plainText = PlainText(mms.toString())                val forward: ForwardMessage = buildForwardMessage {            add(809109491L, "ra", plainText)            }                subject.sendMessage(forward)                }    }    case("更新") {    val user = sender.id            if (user == 3113769776 || user == 2504013368 || user == 548580339L || user == 1471135253L || user == 809109491L || user == 488254306L) {    subject.sendMessage(QuoteReply(message) + "更新中")    coreMindustry.lib.RootCommands.handleInput("sa reload mirai", null)    }    }        contains("_", true).reply {            if (this is GroupMessageEvent) {                return@case            }            val xs = it.replace("_", "")            val user = sender.id            if (user == 3113769776 || user == 2504013368 || user == 548580339L || user == 1471135253L || user == 809109491L || user == 488254306L) {                subject.sendMessage(QuoteReply(message) + "执行命令: $xs\n3秒后回传")                coreMindustry.lib.RootCommands.handleInput(xs, null)                delay(3000)                val mes = outputStream                val strippedMessage = mes.toString()                val sm = strippedMessage.replace("<br>", "\n")                val mms = sa(sm.toString())                val plainText = PlainText(mms.toString())                val forward: ForwardMessage = buildForwardMessage {            add(809109491L, "ra", plainText)            }                subject.sendMessage(forward)                delay(10)            coreMindustry.lib.RootCommands.handleInput("sa reload mirai/ssh", null)            }        }    }fun sa(text: String): String {    val ansiRegex = "\u001B\\[[;\\d]*m".toRegex()    return text.replace(ansiRegex, "")}